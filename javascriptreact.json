{
	"获取长度": {
		"prefix": ".length",
		"body": [
			".length",
		],
	},
	"确认选择框": {
		"prefix": "confirm",
		"body": [
			"confirm($0)",
		],
	},
	"内容输入框": {
		"prefix": "prompt",
		"body": [
			"prompt($0)",
		],
	},
	"外部函数": {
		"prefix": "function outer()",
		"body": [
			"function outer(){",
			"\tfunction closure(){",
			"\t\treturn",
			"\t};",
			"\treturn closure;",
			"};"
		],
		"description": "外部函数"
	},
	"声明常量": {
		"prefix": "con",
		"body": [
			"const $0",
		],
		"description": "声明常量"
	},
	"箭头函数": {
		"prefix": "fun.",
		"body": [
			"($0) => {",
			"}",
		],
		"description": "箭头函数"
	},
	//事件类型
	"拖拽的元素在区域内移动": {
		"prefix": ".ondragover ",
		"body": [
			".ondragover = function(e){",
			"e.preventDefault()",
			"};"
		],
		"description": "拖拽的元素在区域内移动"
	},
	"阻止默认事件": {
		"prefix": "e.preventDefault()",
		"body": [
			"e.preventDefault()",
		],
		"description": "阻止默认事件"
	},
	"元素结束拖拽时,在区域内": {
		"prefix": ".ondrop ",
		"body": [
			".ondrop = function($0){",
			"};"
		],
		"description": "元素结束拖拽时,在区域内"
	},
	"元素拖拽离开": {
		"prefix": ".dragleave ",
		"body": [
			".dragleave = function($0){",
			"};"
		],
		"description": "元素拖拽离开"
	},
	"元素拖拽进入": {
		"prefix": ".dragenter ",
		"body": [
			".dragenter = function($0){",
			"};"
		],
		"description": "元素拖拽进入"
	},
	"元素拖拽结束": {
		"prefix": ".ondragend ",
		"body": [
			".ondragend = function($0){",
			"};"
		],
		"description": "元素拖拽结束"
	},
	"元素拖拽中": {
		"prefix": ".ondrag ",
		"body": [
			".ondrag = function($0){",
			"};"
		],
		"description": "元素拖拽中"
	},
	"注册事件": {
		"prefix": ".addEventListener",
		"body": [
			".addEventListener('${0:事件类型}' , function () {",
			"})",
		],
		"description": "注册事件IE9+兼容"
	},
	"事件的阶段": {
		"prefix": "e.eventPhase",
		"body": [
			"e.eventPhase",
		],
		"description": "事件的阶段"
	},
	"事件的真正触发对象": {
		"prefix": "e.target",
		"body": [
			"e.target",
		],
		"description": "事件的真正触发对象"
	},
	"获取事件名称": {
		"prefix": "e.type",
		"body": [
			"e.type",
		],
		"description": "获取事件名称"
	},
	//网页元素API
	"document.querySelector": {
		"prefix": "document.querySelector",
		"body": [
			"document.querySelector('$0')",
		],
	},
	"document.querySelectorAll": {
		"prefix": "document.querySelectorAll",
		"body": [
			"document.querySelectorAll('$0')",
		],
	},
	"获取自定义属性": {
		"prefix": ".getAttribute",
		"body": [
			".getAttribute('${0:属性名}')",
		],
		"description": "获取自定义属性"
	},
	"设置自定义属性": {
		"prefix": ".setAttribute",
		"body": [
			".setAttribute('${1:属性名}','${0:属性值}')",
		],
		"description": "设置自定义属性"
	},
	"移除自定义属性": {
		"prefix": ".removeAttribute",
		"body": [
			".removeAttribute('${0:属性名}')",
		],
		"description": "移除自定义属性"
	},
	"移除节点": {
		"prefix": ".removeChild",
		"body": [
			"${0:父节点}.removeChild(${1:移除节点})",
		],
		"description": "移除节点"
	},
	"获取子元素节点": {
		"prefix": ".children",
		"body": [
			".children",
		],
		"description": "获取子元素节点"
	},
	"创建元素节点": {
		"prefix": "document.createElement",
		"body": [
			"document.createElement('${0:标签名}')",
		],
		"description": "创建元素节点"
	},
	"用新的子元素替换已有的子元素": {
		"prefix": "replaceChild",
		"body": [
			"replaceChild(${0:新节点},${1:替换节点})",
		],
		"description": "用新的子元素替换已有的子元素"
	},
	"根据标签名获取元素": {
		"prefix": "getTagName",
		"body": [
			"let ${0:li}List = document.getElementsByTagName('${0:li}')",
		],
		"description": "根据标签名获取元素"
	},
	"根据类名获取元素": {
		"prefix": "getclassname",
		"body": [
			"let ${0:one}List = document.getElementsByClassName('${0:one}')",
		],
		"description": "根据类名获取元素"
	},
	"根据id获取元素": {
		"prefix": "getid",
		"body": [
			"let ${0:box} = document.getElementById('${0:box}')",
		],
		"description": "根据id获取元素"
	},
	"在指定节点前面插入一个节点": {
		"prefix": ".insertBefore",
		"body": [
			".insertBefore(${1:移动节点},${0:插入节点})",
		],
		"description": "在指定节点前面插入一个节点"
	},
	"设置循环计时器": {
		"prefix": "setIn",
		"body": [
			"setInterval(() => {",
			"\t$0",
			"},30)",
		],
		"description": "设置循环计时器"
	},
	"设置单次计时器": {
		"prefix": "setT",
		"body": [
			"setTimeout(() => {",
			"\t$0",
			"},1000)",
		],
		"description": "设置单次计时器"
	},
	"参照最近定位父元素获取左偏移量": {
		"prefix": ".offL",
		"body": [
			".offsetLeft",
		],
		"description": "参照最近定位父元素获取左偏移量"
	},
	"参照最近定位父元素获取上偏移量": {
		"prefix": ".offT",
		"body": [
			".offsetTop",
		],
		"description": "参照最近定位父元素获取上偏移量"
	},
	"获取元素真实宽度": {
		"prefix": ".offW",
		"body": [
			".offsetWidth",
		],
		"description": "获取元素真实宽度"
	},
	"获取元素真实高度": {
		"prefix": ".offH",
		"body": [
			".offsetHeight",
		],
		"description": "获取元素真实高度"
	},
	"移除计时器": {
		"prefix": "clearInterval",
		"body": [
			"clearInterval(${0:timeD})",
		],
		"description": "移除计时器"
	},
	"移动节点到父元素最后": {
		"prefix": ".appendChild",
		"body": [
			"${1:父元素}.appendChild(${0:操作元素})",
		],
		"description": "移动节点到父元素最后"
	},
	"获取水平滚动出去的距离": {
		"prefix": "scrollLeft",
		"body": [
			"document.documentElement.scrollLeft",
		],
		"description": "获取水平滚动出去的距离"
	},
	"获取垂直滚动出去的距离": {
		"prefix": "scrollTop",
		"body": [
			"document.documentElement.scrollTop",
		],
		"description": "获取垂直滚动出去的距离"
	},
	"获取相对页面坐标点": {
		"prefix": "pageX",
		"body": [
			"pageX",
		],
		"description": "获取相对页面坐标点"
	},
	"获取用户拖拽过来的文件": {
		"prefix": "e.dataTransfer.files",
		"body": [
			"e.dataTransfer.files[${0:0}];",
		],
		"description": "获取用户拖拽过来的文件"
	},
	"获取文件的临时路径": {
		"prefix": "URL.createObjectURL",
		"body": [
			"URL.createObjectURL(${0:文件})",
		],
		"description": "获取文件的临时路径"
	},
	"获取匹配的文本数组": {
		"prefix": ".match",
		"body": [
			".match(/${0:正则表达式}/)",
		],
		"description": "获取匹配的文本数组"
	},
	"正则表达式": {
		"prefix": ".test",
		"body": [
			"${1:正则表达式}.test('${0:字符串}')",
		],
		"description": "正则表达式"
	},
	//语法类型
	"改变函数的this指向,并且返回一个新函数": {
		"prefix": ".bind",
		"body": [
			".bind($0)",
		],
		"description": "改变函数的this指向,并且返回一个新函数"
	},
	"改变函数的this指向,并且直接调用函数": {
		"prefix": ".call",
		"body": [
			".call($0)",
		],
		"description": "改变函数的this指向,并且直接调用函数"
	},
	"改变函数的this指向,并且直接调用函数,参数为数组": {
		"prefix": ".apply",
		"body": [
			".apply($0)",
		],
		"description": "改变函数的this指向,并且直接调用函数,参数为数组"
	},
	"遍历数组": {
		"prefix": "forarr",
		"body": [
			"for(let ${1:i} = 0;${1:i} < ${0:arr}.length;${1:i}++){",
			"};",
		],
		"description": "数组快速for循环遍历"
	},
	"迭代器": {
		"prefix": "forof",
		"body": [
			"for(let item of ${0:arr}){",
			"};",
		],
		"description": "迭代器"
	},
	"函数": {
		"prefix": "function",
		"body": [
			"function $0() {",
			"}",
		],
		"description": "函数"
	},
	"自调用函数": {
		"prefix": "function (w)",
		"body": [
			";(function (w) {",
			"\t$0",
			"}(window))",
		],
		"description": "自调用函数"
	},
	// "事件e兼容处理": {
	// 	"prefix": "e = e || window.event;",
	// 	"body": [
	// 		"e = e || window.event;",
	// 	],
	// 	"description": "事件e兼容处理"
	// },
	"对象原型添加方法": {
		"prefix": ".prototype",
		"body": [
			".prototype.${0:方法} = function () {",
			"};",
		],
		"description": "对象原型添加方法"
	},
	"缓动动画函数": {
		"prefix": "animationSlow",
		"body": [
			"animationSlow(${1:box}, {",
			"\tleft: $2,",
			"\ttop: $3,",
			"\twidth: $4,",
			"\theight: $5,",
			"\tzIndex: 1,",
			"\topacity: 0.5,",
			"\tbackgroundColor: 'rgb(255,20,10)'",
			"})",
		],
		"description": "缓动动画函数"
	},
	"for循环": {
		"prefix": "for",
		"body": [
			"for (let ${1:i} = ${2:0}; ${1:i} < ${0:0}; ${1:i}++) {",
			"};",
		],
	},
	"forin": {
		"prefix": "forin",
		"body": [
			"for (let key in ${0:obj}) {",
			"};",
		],
	},
	"如果..则..  否则如果..则...": {
		"prefix": "if else else if",
		"body": [
			"if (${0:condition}) {",
			"} else if () {",
			"}",
		],
	},
	"switch判断": {
		"prefix": "switch",
		"body": [
			"switch ($1) {",
			"\tcase $0:{",
			"\t\tbreak;",
			"\t};",
			"\tdefault:{",
			"\t\tbreak;",
			"\t};",
			"};",
		],
	},
	"If Statement": {
		"prefix": "if",
		"body": [
			"if (${0:condition}) {",
			"}"
		],
		"description": "If Statement"
	},
	"If-Else Statement": {
		"prefix": "ifelse",
		"body": [
			"if (${0:condition}) {",
			"} else {",
			"}"
		],
		"description": "If-Else Statement"
	},
	"While Statement": {
		"prefix": "while",
		"body": [
			"while (${1:condition}) {",
			"\t$0",
			"}"
		],
		"description": "While Statement"
	},
	"Do-While Statement": {
		"prefix": "dowhile",
		"body": [
			"do {",
			"\t$0",
			"} while (${1:condition})"
		],
		"description": "Do-While Statement"
	},
	"Log to the console": {
		"prefix": "log",
		"body": [
			"console.log($0)"
		],
		"description": "Log to the console"
	},
	//数学对象类型
	"转换成整数": {
		"prefix": "parseInt",
		"body": [
			"parseInt($0)",
		],
	},
	"获得nim-max之间的随机值": {
		"prefix": "getRandom",
		"body": [
			"function  getRandom(${1:min}, ${0:max}) {",
			"let min = Math.ceil(min)",
			"let max = Math.floor(max)",
			"return Math.floor(Math.random() * (max - min + 1) + min)",
			"};",
		],
	},
	"转换成浮点数": {
		"prefix": "parseFloat",
		"body": [
			"parseFloat($0)",
		],
	},
	"数学-随机数": {
		"prefix": "Math.random",
		"body": [
			"Math.random()$0",
		],
	},
	"数学-地板函数": {
		"prefix": "Math.floor",
		"body": [
			"Math.floor($1)",
		],
	},
	"数学-天花板函数": {
		"prefix": "Math.ceil",
		"body": [
			"Math.ceil($1)",
		],
	},
	// "数学-四舍五入": {
	// 	"prefix": "Math.round",
	// 	"body": [
	// 		"Math.round($1)",
	// 	],
	// },
	// "数学-圆周率": {
	// 	"prefix": "Math.PI ",
	// 	"body": [
	// 		"Math.PI()$1",
	// 	],
	// },
	"数学-绝对值": {
		"prefix": "Math.abs",
		"body": [
			"Math.abs($0)",
		],
	},
	//数组方法
	"map遍历数组返回新数据": {
		"prefix": ".map",
		"body": [
			".map((${1:item}) => $0)"
		],
	},
	"过滤数组": {
		"prefix": ".filter",
		"body": [
			".filter((${1:item}) => $0)"
		],
	},
	"判断数组数据": {
		"prefix": ".some",
		"body": [
			".some((${1:item}) => $0)"
		],
	},
	"forEach遍历数组": {
		"prefix": ".forEach",
		"body": [
			".forEach((${1:item}) => $0)"
		],
	},
	"查找数组": {
		"prefix": ".find",
		"body": [
			".find((${1:item}) => $0)"
		],
	},
	"数组排序函数": {
		"prefix": ".sort((a, b) =>",
		"body": [
			".sort((a, b) => a - b)",
		],
	},
	"截取数组": {
		"prefix": ".slice(开始下标,结束下标)",
		"body": [
			".slice(${1:开始下标},${0:结束下标})"
		],
		"description": "截取数组"
	},
	"数组尾部添加元素": {
		"prefix": ".push",
		"body": [
			".push($0)",
		],
		"description": "数组尾部添加元素"
	},
	"从前往后查找元素": {
		"prefix": ".indexOf()",
		"body": [
			".indexOf($0)",
		],
		"description": "从前往后查找元素"
	},
	"JQ遍历数组函数": {
		"prefix": ".forEach",
		"body": [
			".forEach((item,index) => {",
			"\t$0",
			"})",
		],
		"description": "JQ遍历数组函数"
	},
	"数组链接字符串": {
		"prefix": ".join()",
		"body": [
			".join('$0')",
		],
		"description": "数组链接字符串"
	},
	"数组删除替换元素": {
		"prefix": ".splice()",
		"body": [
			".splice(${1:开始下标},${0:删除数量})"
		],
		"description": "数组删除替换元素"
	},
	//字符串方法
	"替换字符串中字符": {
		"prefix": ".replace",
		"body": [
			".replace(/${1:原字符}/g,'${0:替换字符}')",
		],
		"description": "替换字符串中字符"
	},
	"获取指定下标字符": {
		"prefix": ".charAt",
		"body": [
			".charAt(${0:下标})",
		],
		"description": "获取指定下标字符"
	},
	"分割字符串成数组": {
		"prefix": ".split",
		"body": [
			".split('${0:分割处字符}')",
		],
		"description": "分割字符串成数组"
	},
	"截取字符串(指定长度)": {
		"prefix": ".substr",
		"body": [
			".substr(${1:开始下标},${0:截取长度})",
		],
		"description": "截取字符串(指定长度)"
	},
	"截取字符串(指定下标)": {
		"prefix": ".substring",
		"body": [
			".substring(${1:开始下标},${0:<结束下标})",
		],
		"description": "截取字符串(指定下标)"
	},
	"查找数据": {
		"prefix": ".includes",
		"body": [
			".includes('${0:查找字符}')",
		],
		"description": "查找数据"
	},
	"把字符串中的大写转换成小写": {
		"prefix": ".toLowerCase",
		"body": [
			".toLowerCase()",
		],
		"description": "把字符串中的大写转换成小写"
	},
	"去除字符串前后空格": {
		"prefix": ".trim()",
		"body": [
			".trim()$0",
		],
		"description": "去除字符串前后空格"
	},
	"从头部填充字符": {
		"prefix": ".padStart()",
		"body": [
			".padStart(${1:填充后长度},'${0:填充字符}')",
		],
		"description": "从头部填充字符"
	},
	"从尾部填充字符": {
		"prefix": ".padEnd()",
		"body": [
			".padEnd(${1:填充后长度},'${0:填充字符}')",
		],
		"description": "从尾部填充字符"
	},
	//日期对象方法
	"获取当前毫秒数": {
		"prefix": ".getTime",
		"body": [
			".getTime()$0",
		],
		"description": "获取当前毫秒数"
	},
	//CSS样式类型
	"设置左偏移": {
		"prefix": ".style.left",
		"body": [
			".style.left = $0 + 'px';",
		],
		"description": "设置左偏移"
	},
	"设置上偏移": {
		"prefix": ".style.top",
		"body": [
			".style.top = $0 + 'px';",
		],
		"description": "设置上偏移"
	},
	"设置背景颜色": {
		"prefix": ".style.bgc",
		"body": [
			".style.backgroundColor = '$0';",
		],
		"description": "设置背景颜色"
	},
	//jQuery
	// ".CSS": {
	// 	"prefix": ".css",
	// 	"body": [
	// 		".css({$0})",
	// 	],
	// 	"description": ".CSS"
	// },
	// "入口函数": {
	// 	"prefix": "$function",
	// 	"body": [
	// 		"$(function () {",
	// 		"\t$0",
	// 		"})",
	// 	],
	// 	"description": "入口函数"
	// },
	// ".offset": {
	// 	"prefix": ".offset",
	// 	"body": [
	// 		".offset({$0})",
	// 	],
	// 	"description": ".offset"
	// },
	// "根据父元素获取边偏移": {
	// 	"prefix": ".position",
	// 	"body": [
	// 		".position({$0})",
	// 	],
	// 	"description": "根据父元素获取变偏移"
	// },
	// "根据父元素获取左偏移": {
	// 	"prefix": ".position.left",
	// 	"body": [
	// 		".position().left",
	// 	],
	// 	"description": "根据父元素获取左偏移"
	// },
	// "根据父元素获取上偏移": {
	// 	"prefix": ".position.top",
	// 	"body": [
	// 		".position().top",
	// 	],
	// 	"description": "根据父元素获取上偏移"
	// },
	// "动画": {
	// 	"prefix": ".animate",
	// 	"body": [
	// 		".animate({$0},1000)",
	// 	],
	// 	"description": "动画"
	// },
	// "宽": {
	// 	"prefix": "width",
	// 	"body": [
	// 		"'width': $0",
	// 	],
	// 	"description": "宽"
	// },
	// "高": {
	// 	"prefix": "height",
	// 	"body": [
	// 		"'height': $0",
	// 	],
	// 	"description": "高"
	// },
	// "左偏移": {
	// 	"prefix": "left",
	// 	"body": [
	// 		"'left': $0",
	// 	],
	// 	"description": "左偏移"
	// },
	// "上偏移": {
	// 	"prefix": "top",
	// 	"body": [
	// 		"'top': $0",
	// 	],
	// 	"description": "上偏移"
	// },
	// "左浮动": {
	// 	"prefix": "float",
	// 	"body": [
	// 		"'float': '${2:left}'$0",
	// 	],
	// 	"description": "左浮动"
	// },
	// "背景": {
	// 	"prefix": "background",
	// 	"body": [
	// 		"'background': '$2'$0",
	// 	],
	// 	"description": "背景"
	// },
	// "外边距": {
	// 	"prefix": "margin",
	// 	"body": [
	// 		"'margin': $0",
	// 	],
	// 	"description": "外边距"
	// },
	// "内边距": {
	// 	"prefix": "padding",
	// 	"body": [
	// 		"'padding': $0",
	// 	],
	// 	"description": "内边距"
	// },
	// "行高": {
	// 	"prefix": "lineHeight",
	// 	"body": [
	// 		"'lineHeight' : '$2'$0",
	// 	],
	// 	"description": "行高"
	// },
	// "中心": {
	// 	"prefix": "center",
	// 	"body": [
	// 		"'center'",
	// 	],
	// 	"description": "中心"
	// },
	// "边框": {
	// 	"prefix": "border",
	// 	"body": [
	// 		"'border' : '$1px solid $2'",
	// 	],
	// 	"description": "边框"
	// },
	// "定位": {
	// 	"prefix": "position",
	// 	"body": [
	// 		"'position' : '${2:absolute}',$0",
	// 	],
	// 	"description": "定位"
	// },
	// "溢出": {
	// 	"prefix": "overflow",
	// 	"body": [
	// 		"'overflow' : '${2:hidden}',$0",
	// 	],
	// 	"description": "溢出"
	// },
	// "文字水平对齐": {
	// 	"prefix": "textAlign",
	// 	"body": [
	// 		"'textAlign' : '${2:center}',$0",
	// 	],
	// 	"description": "文字水平对齐"
	// },
	// "显示元素": {
	// 	"prefix": ".show",
	// 	"body": [
	// 		".show()$0",
	// 	],
	// 	"description": "显示元素"
	// },
	// "相对定位": {
	// 	"prefix": "relative",
	// 	"body": [
	// 		"'relative'",
	// 	],
	// 	"description": "相对定位"
	// },
	// "绝对定位": {
	// 	"prefix": "absolute",
	// 	"body": [
	// 		"'absolute'",
	// 	],
	// 	"description": "绝对定位"
	// },
	// "隐藏元素": {
	// 	"prefix": ".hide",
	// 	"body": [
	// 		".hide()$0",
	// 	],
	// 	"description": "隐藏元素"
	// },
	// "透明度": {
	// 	"prefix": "opacity",
	// 	"body": [
	// 		"'opacity' : $0",
	// 	],
	// 	"description": "透明度"
	// },
	// "过渡": {
	// 	"prefix": "transition",
	// 	"body": [
	// 		"'transition' : '${0:all 1s}'",
	// 	],
	// 	"description": "过渡"
	// },
	// "字体大小": {
	// 	"prefix": "fontSize",
	// 	"body": [
	// 		"'fontSize' : $0",
	// 	],
	// 	"description": "字体大小"
	// },
	// "颜色": {
	// 	"prefix": "color",
	// 	"body": [
	// 		"'color' : '$2'$0",
	// 	],
	// 	"description": "颜色"
	// },
	// "字体": {
	// 	"prefix": "fontFamily",
	// 	"body": [
	// 		"'fontFamily' : '$2'$0",
	// 	],
	// 	"description": "字体"
	// },
	// "层级": {
	// 	"prefix": "zIndex",
	// 	"body": [
	// 		"'zIndex' : $0",
	// 	],
	// 	"description": "层级"
	// },
	// "$()": {
	// 	"prefix": "$$",
	// 	"body": [
	// 		"$('#$0')",
	// 	],
	// 	"description": "$()"
	// },
	// "增加class类名": {
	// 	"prefix": ".addClass",
	// 	"body": [
	// 		".addClass('$0')",
	// 	],
	// 	"description": "增加class类名"
	// },
	// "移除class类名": {
	// 	"prefix": ".removeClass",
	// 	"body": [
	// 		".removeClass('$0')",
	// 	],
	// 	"description": "移除class类名"
	// },
	// "判断是否有该class类名": {
	// 	"prefix": ".hasClass",
	// 	"body": [
	// 		".hasClass('$0')",
	// 	],
	// 	"description": "判断是否有该class类名"
	// },
	// "value": {
	// 	"prefix": ".val",
	// 	"body": [
	// 		".val('$0')",
	// 	],
	// 	"description": "value"
	// },
	// "切换class类名": {
	// 	"prefix": ".toggleClass",
	// 	"body": [
	// 		".toggleClass('$0')",
	// 	],
	// 	"description": "切换class类名"
	// },
	// "下一个兄弟元素": {
	// 	"prefix": ".next",
	// 	"body": [
	// 		".next()$0",
	// 	],
	// 	"description": "下一个兄弟元素"
	// },
	// "上一个兄弟元素": {
	// 	"prefix": ".prev",
	// 	"body": [
	// 		".prev()$0",
	// 	],
	// 	"description": "上一个兄弟元素"
	// },
	// "后面的所有兄弟元素": {
	// 	"prefix": ".nextAll",
	// 	"body": [
	// 		".nextAll()$0",
	// 	],
	// 	"description": "后面的所有兄弟元素"
	// },
	// "前面的所有兄弟元素": {
	// 	"prefix": ".prevAll",
	// 	"body": [
	// 		".prevAll()$0",
	// 	],
	// 	"description": "前面的所有兄弟元素"
	// },
	// "获得其他的兄弟元素": {
	// 	"prefix": ".siblings",
	// 	"body": [
	// 		".siblings()$0",
	// 	],
	// 	"description": "获得其他的兄弟元素"
	// },
	// "修复断链": {
	// 	"prefix": ".end",
	// 	"body": [
	// 		".end()$0",
	// 	],
	// 	"description": "修复断链"
	// },
	"获得最后一个元素": {
		"prefix": ".last",
		"body": [
			".last()$0",
		],
		"description": "获得最后一个元素"
	},
	"获得第一个元素": {
		"prefix": ".first",
		"body": [
			".first()$0",
		],
		"description": "获得第一个元素"
	},
	// "滑入": {
	// 	"prefix": ".slideUp",
	// 	"body": [
	// 		".slideUp()$0",
	// 	],
	// 	"description": "滑入"
	// },
	// "滑出": {
	// 	"prefix": ".slideDown",
	// 	"body": [
	// 		".slideDown()$0",
	// 	],
	// 	"description": "滑出"
	// },
	// "滑入滑出切换": {
	// 	"prefix": ".slideToggle",
	// 	"body": [
	// 		".slideToggle()$0",
	// 	],
	// 	"description": "滑入滑出切换"
	// },
	// "淡入": {
	// 	"prefix": ".fadeIn",
	// 	"body": [
	// 		".fadeIn()$0",
	// 	],
	// 	"description": "淡入"
	// },
	// "淡出": {
	// 	"prefix": ".fadeOut",
	// 	"body": [
	// 		".fadeOut()$0",
	// 	],
	// 	"description": "淡出"
	// },
	// "淡入淡出切换": {
	// 	"prefix": ".fadeToggle",
	// 	"body": [
	// 		".fadeToggle()$0",
	// 	],
	// 	"description": "淡入淡出切换"
	// },
	// "JQ遍历每个元素": {
	// 	"prefix": ".each",
	// 	"body": [
	// 		".each((index,item) => {",
	// 		"\t${0:$(item)}",
	// 		"})",
	// 	],
	// 	"description": "JQ遍历每个元素"
	// },
	"添加元素": {
		"prefix": ".append",
		"body": [
			".append($0)",
		],
		"description": "添加元素"
	},
	// "添加元素到": {
	// 	"prefix": ".appendTo",
	// 	"body": [
	// 		".appendTo($0)",
	// 	],
	// 	"description": "添加元素到"
	// },
	// "获取第一个匹配元素外部宽度（默认包括补白和边框）": {
	// 	"prefix": ".outerWidth",
	// 	"body": [
	// 		".outerWidth()$0",
	// 	],
	// 	"description": "获取第一个匹配元素外部宽度（默认包括补白和边框）"
	// },
	// "获取第一个匹配元素外部高度（默认包括补白和边框）": {
	// 	"prefix": ".outerHeight",
	// 	"body": [
	// 		".outerHeight()$0",
	// 	],
	// 	"description": "获取第一个匹配元素外部高度（默认包括补白和边框）"
	// },
	// "元素标签文本内容": {
	// 	"prefix": ".text",
	// 	"body": [
	// 		".text($1)$0",
	// 	],
	// 	"description": "元素标签文本内容"
	// },
	// "获取父元素": {
	// 	"prefix": ".parent",
	// 	"body": [
	// 		".parent()$0",
	// 	],
	// 	"description": "获取父元素"
	// },
	// "鼠标移入": {
	// 	"prefix": "mouseenter",
	// 	"body": [
	// 		"'mouseenter'",
	// 	],
	// 	"description": "鼠标移入"
	// },
	// "鼠标移出": {
	// 	"prefix": "mouseleave",
	// 	"body": [
	// 		"'mouseleave'",
	// 	],
	// 	"description": "鼠标移出"
	// },
	// "值改变事件": {
	// 	"prefix": "change",
	// 	"body": [
	// 		"'change'",
	// 	],
	// 	"description": "值改变事件"
	// },
	// "鼠标移入(触发冒泡)": {
	// 	"prefix": "mouseover",
	// 	"body": [
	// 		"'mouseover'",
	// 	],
	// 	"description": "鼠标移入(触发冒泡)"
	// },
	// "鼠标移动": {
	// 	"prefix": "mousemove",
	// 	"body": [
	// 		"'mousemove'",
	// 	],
	// 	"description": "鼠标移动"
	// },
	// "jQ点击": {
	// 	"prefix": "click",
	// 	"body": [
	// 		"'click'",
	// 	],
	// 	"description": "jQ点击"
	// },
	// "jQ键盘按下": {
	// 	"prefix": "keydown",
	// 	"body": [
	// 		"'keydown'",
	// 	],
	// 	"description": "jQ键盘按下"
	// },
	// "jQ键盘弹起": {
	// 	"prefix": "keyup",
	// 	"body": [
	// 		"'keyup'",
	// 	],
	// 	"description": "jQ键盘弹起"
	// },
	// "鼠标按下": {
	// 	"prefix": "mousedown",
	// 	"body": [
	// 		"'mousedown'",
	// 	],
	// 	"description": "鼠标按下"
	// },
	// "鼠标弹起": {
	// 	"prefix": "mouseup",
	// 	"body": [
	// 		"'mouseup'",
	// 	],
	// 	"description": "鼠标弹起"
	// },
	// "失去焦点": {
	// 	"prefix": "blur",
	// 	"body": [
	// 		"'blur'",
	// 	],
	// 	"description": "失去焦点"
	// },
	// "成为焦点": {
	// 	"prefix": "focus",
	// 	"body": [
	// 		"'focus'",
	// 	],
	// 	"description": "成为焦点"
	// },
	// "display": {
	// 	"prefix": "display",
	// 	"body": [
	// 		"'display': '${1:block}'$0",
	// 	],
	// 	"description": "display"
	// },
	// "jQ绑定事件": {
	// 	"prefix": ".on(事件,子元素,函数)",
	// 	"body": [
	// 		".on(${0:'click'},function () {",
	// 		"})",
	// 	],
	// 	"description": "jQ绑定事件"
	// },
	// "改变": {
	// 	"prefix": "transform",
	// 	"body": [
	// 		"'transform' : ${1:'translateX($2)'}$0",
	// 	],
	// 	"description": "改变"
	// },
	// "位移": {
	// 	"prefix": "translate",
	// 	"body": [
	// 		"'translateX($1)'$0",
	// 	],
	// 	"description": "位移"
	// },
	// "旋转": {
	// 	"prefix": "rotate",
	// 	"body": [
	// 		"'rotate($1deg)'$0",
	// 	],
	// 	"description": "旋转"
	// },
	// "清空元素中内容": {
	// 	"prefix": ".empty",
	// 	"body": [
	// 		".empty()$0",
	// 	],
	// 	"description": "清空元素中内容"
	// },
	// "操作属性": {
	// 	"prefix": ".attr",
	// 	"body": [
	// 		".attr('$0')",
	// 	],
	// 	"description": "操作属性"
	// },
	// "结束队列中的动画": {
	// 	"prefix": ".stop(true,false)",
	// 	"body": [
	// 		".stop(true,false)",
	// 	],
	// 	"description": "结束队列中的动画"
	// },
	// "触发事件": {
	// 	"prefix": ".trigger(触发事件)",
	// 	"body": [
	// 		".trigger(${0:'click'})",
	// 	],
	// 	"description": "触发事件"
	// },
	// ajax
	"$.ajax": {
		"prefix": "$.ajax",
		"body": [
			"$.ajax({",
			"\ttype:'${1:post}',",
			"\turl:'$2',",
			"\tdata:{$3},",
			"\tdataType:'json',",
			"\tsuccess:function(${0:backData}){",
			"\t}",
			"})",
		],
		"description": "$.ajax"
	},
	// "$.ajaxFormData": {
	// 	"prefix": "$.ajaxFormData",
	// 	"body": [
	// 		"let fd = new FormData($('form')[0])",
	// 		"$.ajax({",
	// 		"\ttype:'${1:post}',",
	// 		"\turl:'$2',",
	// 		"\tdata:fd,",
	// 		"\tcontentType:false,",
	// 		"\tprocessData:false,",
	// 		"\tsuccess:function(${0:backData}){",
	// 		"\t}",
	// 		"})",
	// 	],
	// 	"description": "$.ajaxFormData"
	// },
	"JSON.转js对象": {
		"prefix": "JSON.parse()",
		"body": [
			"JSON.parse($0)",
		],
		"description": "JSON.转js对象"
	},
	"js对象转JSON": {
		"prefix": "JSON.stringify()",
		"body": [
			"JSON.stringify($0)",
		],
		"description": "js对象转JSON"
	},
	// "模板": {
	// 	"prefix": "template",
	// 	"body": [
	// 		"template('${1:eleID}',${0:backData})",
	// 	],
	// 	"description": "模板"
	// },
	// "xhrget": {
	// 	"prefix": "xhrget",
	// 	"body": [
	// 		"let ${0:xhr} = new XMLHttpRequest()",
	// 		"${0:xhr}.open('get', 'https://autumnfish.cn/api/joke/list?num=3')",
	// 		"${0:xhr}.onreadystatechange = function () {",
	// 		"\tif (${0:xhr}.readyState == 4) {",
	// 		"\t\tlet data = JSON.parse(${0:xhr}.response)",
	// 		"\t}",
	// 		"};",
	// 		"${0:xhr}.send()",
	// 	],
	// 	"description": "xhrget"
	// },
	// "xhrpost": {
	// 	"prefix": "xhrpost",
	// 	"body": [
	// 		"let ${0:xhr} = new XMLHttpRequest()",
	// 		"${0:xhr}.open('post', 'https://autumnfish.cn/api/user/check')",
	// 		"${0:xhr}.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')",
	// 		"${0:xhr}.onreadystatechange = function () {",
	// 		"\tif (${0:xhr}.readyState == 4) {",
	// 		"\t\tlet data = JSON.parse(${0:xhr}.response)",
	// 		"\t}",
	// 		"};",
	// 		"${0:xhr}.send('key=value')",
	// 	],
	// 	"description": "xhrpost"
	// },
	// node.js
	// "创建服务器": {
	// 	"prefix": "require.http",
	// 	"body": [
	// 		"// 导入http模块",
	// 		"const http = require('http')",
	// 		"// 创建服务器",
	// 		"const server = http.createServer((request, response) => {",
	// 		"\t// 返回内容",
	// 		"\tresponse.end($0)",
	// 		"})",
	// 		"// 开启服务器",
	// 		"server.listen(8080,() => {})",
	// 	],
	// 	"description": "创建服务器"
	// },
	"require": {
		"prefix": "require",
		"body": [
			"const ${0:fs} = require('${0:fs}')"
		],
		"description": "require"
	},
	// "readFile读取文件": {
	// 	"prefix": "fs.readFile",
	// 	"body": [
	// 		"fs.readFile('${1:url}',(err,data)=>{",
	// 		"\tif (err) throw err;",
	// 		"\t$0",
	// 		"})"
	// 	],
	// },
	// "readFile写文件": {
	// 	"prefix": "fs.writeFile",
	// 	"body": [
	// 		"fs.writeFile('${1:url}',data, (err) => {",
	// 		"\tif (err) throw err;",
	// 		"\t$0",
	// 		"})",
	// 	],
	// },
	// "unlink删除文件": {
	// 	"prefix": "fs.unlink",
	// 	"body": [
	// 		"fs.unlink('${1:url}', (err) => {",
	// 		"\tif (err) throw err;",
	// 		"\t$0",
	// 		"})",
	// 	],
	// },
	"获取当前文件所在的文件夹绝对路径": {
		"prefix": "__dirname",
		"body": [
			"__dirname",
		],
		"description": "获取当前文件所在的文件夹绝对路径"
	},
	"拼接路径": {
		"prefix": "path.join",
		"body": [
			"path.join(__dirname,$0)",
		],
		"description": "拼接路径"
	},
	// "暴露内容": {
	// 	"prefix": "module.exports",
	// 	"body": [
	// 		"module.exports = {$0};",
	// 	],
	// 	"description": "暴露内容"
	// },
	// "express暴露文件夹": {
	// 	"prefix": "app.use(express.static(''))",
	// 	"body": [
	// 		"app.use(express.static('${0:file}'))",
	// 	],
	// 	"description": "express暴露文件夹"
	// },
	// "调用body-parser模块方法": {
	// 	"prefix": "app.use(bodyParser.urlencoded({ extended: false }))",
	// 	"body": [
	// 		"app.use(bodyParser.urlencoded({ extended: false }))",
	// 	],
	// 	"description": "调用body-parser模块方法"
	// },
	// "中间件": {
	// 	"prefix": "app.use((req,res,next) =>)",
	// 	"body": [
	// 		"app.use((req, res, next) => {",
	// 		"\t$0",
	// 		"\tnext()",
	// 		"})",
	// 	],
	// 	"description": "中间件"
	// },
	// "express创建get接口": {
	// 	"prefix": "router.get",
	// 	"body": [
	// 		"router.get('/$0', (req, res) => {",
	// 		"})",
	// 	],
	// 	"description": "express创建get接口"
	// },
	// "express创建post接口": {
	// 	"prefix": "router.post",
	// 	"body": [
	// 		"router.post('/$1', (req, res) => {",
	// 		"})",
	// 	],
	// 	"description": "express创建post接口"
	// },
	// "创建post接口fromData": {
	// 	"prefix": "router.post(fromData)",
	// 	"body": [
	// 		"router.post('/$1', upload.single(\"$0\"), (req, res) => {",
	// 		"\tlet ${0:fi le} = req.file.filename;",
	// 		"})",
	// 	],
	// 	"description": "创建post接口fromData"
	// },
	// "req.query": {
	// 	"prefix": "req.query",
	// 	"body": [
	// 		"req.query",
	// 	],
	// 	"description": "req.query"
	// },
	// "req.file.filename": {
	// 	"prefix": "req.file.filename",
	// 	"body": [
	// 		"req.file.filename",
	// 	],
	// 	"description": "req.file.filename"
	// },
	// "快速搭建express服务器": {
	// 	"prefix": "express",
	// 	"body": [
	// 		"//第三方模块 express body-parser cors multer mysql",
	// 		"//1.导入模块",
	// 		"const express = require('express')",
	// 		"const bodyParser = require('body-parser')",
	// 		"const cors = require('cors')",
	// 		"const path = require('path')",
	// 		"const multer = require('multer')",
	// 		"const db = require(path.join(__dirname, 'utils', 'db.js'))",
	// 		"const user = require(path.join(__dirname, 'route', 'user.js'))",
	// 		"//utils/db.js",
	// 		"const mysql = require('mysql')",
	// 		"// 设置连接的数据库信息",
	// 		"const connection = mysql.createConnection({",
	// 		"\t// 地址",
	// 		"\thost: 'localhost',",
	// 		"\t// 用户名",
	// 		"\tuser: 'root',",
	// 		"\t// 密码",
	// 		"\tpassword: 'root',",
	// 		"\t// 库的名字",
	// 		"\tdatabase: 'xuanyuanjian'",
	// 		"})",
	// 		"// 连接数据库",
	// 		"connection.connect()",
	// 		"module.exports = {connection};",
	// 		"",
	// 		"//新建一个uploads文件夹.",
	// 		"const upload = multer({ dest: 'uploads/' })",
	// 		"",
	// 		"//2.创建服务器",
	// 		"const app = express()",
	// 		"app.use(bodyParser.urlencoded({ extended: false }))",
	// 		"app.use(cors())",
	// 		"app.use(express.static('upload'))//暴露upload目录",
	// 		"",
	// 		"app.use('/user', user)",
	// 		"",
	// 		"//3.开启服务器",
	// 		"app.listen(3000,()=>{",
	// 		"\tconsole.log('success')",
	// 		"})"
	// 	],
	// 	"description": "快速搭建express服务器"
	// },
	// "路由模块": {
	// 	"prefix": "express-router",
	// 	"body": [
	// 		"// 导包",
	// 		"const express = require('express')",
	// 		"const path = require('path')",
	// 		"const db = require(path.join(__dirname, '../utils', 'db.js'))",
	// 		"// 创建一个路由",
	// 		"const router = express.Router()",
	// 		"",
	// 		"$0",
	// 		"",
	// 		"module.exports = router;",
	// 	],
	// 	"description": "express-router"
	// },
	// "设置响应头解决跨域": {
	// 	"prefix": "res.setHeader('Access-Control-Allow-Origin','*')",
	// 	"body": [
	// 		"res.setHeader('Access-Control-Allow-Origin','*')",
	// 	],
	// 	"description": "设置响应头解决跨域"
	// },
	// "SQL创建表格": {
	// 	"prefix": "sql.add-table",
	// 	"body": [
	// 		"let tableSQL = `create table ${0:tableName}",
	// 		"(",
	// 		"id int auto_increment primary key,",
	// 		"LastName varchar(255),",
	// 		"FirstName varchar(255)",
	// 		")`;",
	// 		"connection.query(tableSQL, (err, results) => {})",
	// 	],
	// 	"description": "SQL创建表格"
	// },
	// "SQL基础语法": {
	// 	"prefix": "sql",
	// 	"body": [
	// 		"let ${1:insertSQL} = `$0`;",
	// 		"connection.query(${1:insertSQL}, (err, results) => {})",
	// 	],
	// 	"description": "SQL基础语法"
	// },
	// "SQL查": {
	// 	"prefix": "sql.get",
	// 	"body": [
	// 		"db.connection.query(",
	// 		"\t`select * from ${2:表名} ${0:where id = 2}`,",
	// 		"\t(err, results, fields) => {",
	// 		"\t\tif (!err) {",
	// 		"\t\t\tres.send({",
	// 		"\t\t\t\tcode: 200,",
	// 		"\t\t\t\tmsg: '获取成功',",
	// 		"\t\t\t\tdata: results",
	// 		"\t\t\t})",
	// 		"\t\t} else {",
	// 		"\t\t\tres.send({",
	// 		"\t\t\t\tcode: 400,",
	// 		"\t\t\t\tmsg: '获取失败',",
	// 		"\t\t\t})",
	// 		"\t\t}",
	// 		"\t})",
	// 	],
	// 	"description": "SQL查"
	// },
	// "SQL增": {
	// 	"prefix": "sql.add",
	// 	"body": [
	// 		"db.connection.query(",
	// 		"\t`insert into ${2:表名} (${0:content}) values(\"${req.body.content}\")`,",
	// 		"\t(err, results, fields) => {",
	// 		"\t\tif (!err) {",
	// 		"\t\t\tres.send({",
	// 		"\t\t\t\tcode: 200,",
	// 		"\t\t\t\tmsg: '添加成功',",
	// 		"\t\t\t})",
	// 		"\t\t} else {",
	// 		"\t\t\tres.send({",
	// 		"\t\t\t\tcode: 400,",
	// 		"\t\t\t\tmsg: '添加失败',",
	// 		"\t\t\t})",
	// 		"\t\t}",
	// 		"\t})",
	// 	],
	// 	"description": "SQL增"
	// },
	// "SQL改": {
	// 	"prefix": "sql.set",
	// 	"body": [
	// 		"db.connection.query(",
	// 		"\t`update ${2:表名} set ${3:name}=\"${req.body.${3:name}}\" where id = ${req.body.${4:id}}`,",
	// 		"\t(err, results, fields) => {",
	// 		"\t\tif (!err) {",
	// 		"\t\t\tres.send({",
	// 		"\t\t\t\tcode: 200,",
	// 		"\t\t\t\tmsg: '编辑成功',",
	// 		"\t\t\t})",
	// 		"\t\t} else {",
	// 		"\t\t\tres.send({",
	// 		"\t\t\t\tcode: 400,",
	// 		"\t\t\t\tmsg: '编辑失败',",
	// 		"\t\t\t})",
	// 		"\t\t}",
	// 		"\t})",
	// 	],
	// 	"description": "SQL改"
	// },
	// "SQL删": {
	// 	"prefix": "sql.del",
	// 	"body": [
	// 		"db.connection.query(",
	// 		"\t`delete from ${2:表名} where ${req.query.${0:id}}`,",
	// 		"\t(err, results, fields) => {",
	// 		"\t\tif (!err) {",
	// 		"\t\t\tres.send({",
	// 		"\t\t\t\tcode: 200,",
	// 		"\t\t\t\tmsg: '删除成功',",
	// 		"\t\t\t})",
	// 		"\t\t} else {",
	// 		"\t\t\tres.send({",
	// 		"\t\t\t\tcode: 400,",
	// 		"\t\t\t\tmsg: '删除失败',",
	// 		"\t\t\t})",
	// 		"\t\t}",
	// 		"\t})",
	// 	],
	// 	"description": "SQL删"
	// },
	// Vue
	"vue": {
		"prefix": "vue",
		"body": [
			"const app = new Vue({",
			"\tel: '#app',",
			"\tdata: {$0},",
			"\tmethods:{},",
			"})",
		],
		"description": "vue"
	},
	// "vue组件": {
	// 	"prefix": "vue.component",
	// 	"body": [
	// 		"Vue.component('${0:tag}', {",
	// 		"\ttemplate: '#tpl',",
	// 		"\tdata() {",
	// 		"\t\treturn {}",
	// 		"\t},",
	// 		"\tmethods: {},",
	// 		"})",
	// 	],
	// 	"description": "vue组件"
	// },
	"计算属性": {
		"prefix": "computed:{}",
		"body": [
			"computed:{",
			"\t$0",
			"},",
		],
		"description": "计算属性"
	},
	"vue数据改变但DOM未渲染": {
		"prefix": "beforeUpdate(){}",
		"body": [
			"beforeUpdate(){",
			"\t$0",
			"},",
		],
		"description": "vue数据改变但DOM未渲染"
	},
	"vue数据改变且DOM完成渲染后": {
		"prefix": "updated(){}",
		"body": [
			"updated(){",
			"\t$0",
			"},",
		],
		"description": "vue数据改变且DOM完成渲染后"
	},
	"导入组件": {
		"prefix": "components",
		"body": [
			"components:{",
			"\t$0",
			"},",
		],
		"description": "导入组件"
	},
	"vue创建完成之前": {
		"prefix": "beforeCreate(){}",
		"body": [
			"beforeCreate(){",
			"\t$0",
			"},",
		],
		"description": "vue创建完成之前"
	},
	"vue完全创建后": {
		"prefix": "created(){}",
		"body": [
			"created(){",
			"\t$0",
			"},",
		],
		"description": "vue完全创建后"
	},
	"vue数据挂载到DOM之前": {
		"prefix": "beforeMounted(){}",
		"body": [
			"beforeMounted(){",
			"\t$0",
			"},",
		],
		"description": "vue数据挂载到DOM之前"
	},
	"vue数据挂载到DOM后": {
		"prefix": "mounted(){}",
		"body": [
			"mounted(){",
			"\t$0",
			"},",
		],
		"description": "vue数据挂载到DOM后"
	},
	"vue销毁之前": {
		"prefix": "beforeDestroy(){}",
		"body": [
			"beforeDestroy(){",
			"\t$0",
			"},",
		],
		"description": "vue销毁之前"
	},
	"vue实例销毁后": {
		"prefix": "destroyed(){}",
		"body": [
			"destroyed(){",
			"\t$0",
			"},",
		],
		"description": "vue实例销毁后"
	},
	"监听属性": {
		"prefix": "watch:{}",
		"body": [
			"watch:{",
			"\t$0",
			"},",
		],
		"description": "监听属性"
	},
	"全局过滤器": {
		"prefix": "Vue.filter",
		"body": [
			"Vue.filter('${1:format}',function (val) {",
			"\treturn val;",
			"})",
		],
		"description": "全局过滤器"
	},
	"Vue.config.keyCode:": {
		"prefix": "Vue.config.keyCode",
		"body": [
			"Vue.config.keyCode.$1 = $0;"
		],
		"description": "Vue.config.keyCode:"
	},
	// "this.$http.get": {
	// 	"prefix": "this.$http.get",
	// 	"body": [
	// 		"this.${1:$}http.get('${2:url}',{params : {$3}}).then((res) => {",
	// 		"\tres = res.body;",
	// 		"})",
	// 	],
	// 	"description": "this.$http.get"
	// },
	// "this.$http.post": {
	// 	"prefix": "this.$http.post",
	// 	"body": [
	// 		"this.${1:$}http.post('${2:url}',{$3},{emulateJSON:true}).then((res) => {",
	// 		"\tres = res.body;",
	// 		"})",
	// 	],
	// 	"description": "this.$http.post"
	// },
	// "this.$http.josnp": {
	// 	"prefix": "this.$http.josnp",
	// 	"body": [
	// 		"this.${1:$}http.josnp('${2:url}',{params : {$3}}).then((res) => {",
	// 		"\tres = res.body;",
	// 		"})",
	// 	],
	// 	"description": "this.$http.josnp"
	// },
	"对象方法": {
		"prefix": "fun",
		"body": [
			"(){",
			"\t$0",
			"},",
		],
		"description": "对象方法"
	},
	"设置全局配置": {
		"prefix": "axios.config",
		"body": [
			"import Axios from 'axios';",
			"import Vue from 'vue';",
			"import JSONbig from 'json-bigint';",
			"Vue.prototype.$axios = Axios;",
			"",
			"//配置axios全局配置",
			"Axios.defaults.baseURL = 'http://ttapi.research.itcast.cn'; //设置全局根域名",
			"Axios.defaults.transformResponse = [",
			"\tdata => {",
			"\t\t// 在传递给 then/catch 前，把返回的大数字做安全处理",
			"try {",
			"\treturn JSONbig.parse(data)",
			"} catch {",
			"\treturn data;",
			"}",
			"\t}",
			"];",
			"",
			"// 添加请求拦截器",
			"Axios.interceptors.request.use(",
			"\tconfig => {",
			"\t\treturn config;",
			"\t},",
			"\terr => {",
			"\t\treturn Promise.reject(err)",
			"\t}",
			")",
			"",
			"// 添加响应拦截器",
			"Axios.interceptors.response.use(",
			"\tresponse => {",
			"\t\treturn response.data;",
			"\t},",
			"\terr => {",
			"\t\treturn Promise.reject(err)",
			"\t}",
			")",
			"",
			"import './api/http'",
		],
		"description": "设置全局配置"
	},
	"自定义指令": {
		"prefix": "directives:(){}",
		"body": [
			"directives: {",
			"\tfocus: {",
			"\t\t//指令的定义",
			"\t\tinserted: (el) => {",
			"\t\t\tel.focus()",
			"\t\t}",
			"\t}",
			"},",
		],
		"description": "自定义指令"
	},
	"修改数据后调用": {
		"prefix": "this.$nextTick",
		"body": [
			"this.$$nextTick(() => {$1})",
		],
		"description": "修改数据后调用"
	},
	"axios.FormData": {
		"prefix": "axios.FormData",
		"body": [
			"let fd = new FormData()",
			"fd.append(\"image\", data.file)",
			"this.$$axios.post(`$1`, fd).then(res => {",
			"\tconsole.log(res)",
			"})",
		],
		"description": "axios.FormData"
	},
	"request-axiosa": {
		"prefix": "request-axios",
		"body": [
			"return request({",
			"\tmethod: '${1:post}',",
			"\turl: '${0:url}',",
			"\tdata: {},",
			"\tparams:{}",
			"})",
		],
		"description": "request-axiosa"
	},
	"axios.get": {
		"prefix": "axios.get",
		"body": [
			"this.$$axios",
			"\t.get(`${1:url}`, { params: {$2}})",
			"\t.then(res => {",
			"\t\tconsole.log(res)",
			"\t})",
			// "\t.catch(err => {})",
		],
		"description": "axios.get"
	},
	"axios.delete": {
		"prefix": "axios.delete",
		"body": [
			"this.$$axios",
			"\t.delete(`${1:url}`, { params: {$2}})",
			"\t.then(res => {",
			"\t\tconsole.log(res)",
			"\t})",
			// "\t.catch(err => {})",
		],
		"description": "axios.delete"
	},
	"抓取错误信息": {
		"prefix": ".catch( () => {})",
		"body": [
			".catch( () => {$0})"
		],
		"description": "抓取错误信息"
	},
	"axios.post": {
		"prefix": "axios.post",
		"body": [
			"this.$$axios.post(`${1:url}`,{$2})",
			"\t.then( res => {",
			"\t\tconsole.log(res)",
			"\t})",
		],
		"description": "axios.post"
	},
	// "axios.post": {
	// 	"prefix": "axios.post",
	// 	"body": [
	// 		"this.$$axios({",
	// 		"\tmethod: 'post',",
	// 		"\turl: '${1:url}',",
	// 		"\theaders: {",
	// 		"\t\t'Content-Type': 'application/x-www-form-urlencoded'",
	// 		"\t},",
	// 		"\tdata: {$2},",
	// 		"\ttransformRequest: [function (data) {",
	// 		"\t\tlet ret = ''",
	// 		"\t\tfor (let it in data) {",
	// 		"\t\t\tret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'",
	// 		"\t\t}",
	// 		"\t\treturn ret",
	// 		"\t}]",
	// 		"}).then(res => {",
	// 		"\tres = res.data;",
	// 		"\tconsole.log(res)",
	// 		"})",
	// 	],
	// 	"description": "axios.post"
	// },
	"最后总会调用": {
		"prefix": ".finally(() => {})",
		"body": [
			".finally(() => {$0})",
		],
		"description": "最后总会调用"
	},
	"滚动插件调用": {
		"prefix": "new IScroll('#wrapper')",
		"body": [
			"this.myScroll = new IScroll('#${0:wrapper}')",
		],
		"description": "滚动插件调用"
	},
	"通过refs操作DOM": {
		"prefix": "this.$refs.",
		"body": [
			"this.$$refs.$1",
		],
		"description": "通过refs操作DOM"
	},
	"配置vue-router": {
		"prefix": "vue-router",
		"body": [
			"//axios vue-router json-bigint  npm i element-ui -S   npm install -D less-loader less",
			"import Vue from 'vue';",
			"import VueRouter from 'vue-router';",
			"",
			"//导入组件",
			"import Foo from '../components/foo';",
			"",
			"<router-link to=\"/foo/vlaue\">Foo</router-link>",
			"<!--内容区 -->",
			"<router-view></router-view>",
			"",
			"//定义路由规则",
			"const routes = [",
			"\t{ path: '/foo/:key', component: Foo }",
			"];",
			"",
			"//创建 router 实例",
			"Vue.use(VueRouter)",
			"const router = new VueRouter({",
			"\troutes,",
			"\tlinkActiveClass: 'active'//选中添加类名",
			"})",
			"",
			"// 暴露router路由实例",
			"export default router;",
			"import router from './router'"
		],
		"description": "配置vue-router"
	},
	"router编程式导航": {
		"prefix": "this.$router.push",
		"body": [
			"this.$$router.push(`${1:/foo}`)"
		],
		"description": "router编程式导航"
	},
	"router跳转到上一次记录": {
		"prefix": "this.$router.back",
		"body": [
			"this.$$router.back()"
		],
		"description": "router跳转到上一次记录"
	},
	"获取路由参数": {
		"prefix": "this.$route.params.",
		"body": [
			"this.$$route.params.$1",
		],
		"description": "获取路由参数"
	},
	"获取url查询参数": {
		"prefix": "this.$route.query.",
		"body": [
			"this.$$route.query.$1",
		],
		"description": "获取url查询参数"
	},
	"局部过滤器": {
		"prefix": "filters:{}",
		"body": [
			"filters: {",
			"\tformat(val) { ",
			"\t\treturn val;",
			"\t},",
			"}",
		],
		"description": "局部过滤器"
	},
	"import导入组件": {
		"prefix": "import App from 'url'",
		"body": [
			"import ${1:App} from '$0';"
		],
		"description": "import导入组件"
	},
	"import导入组件中的整个对象": {
		"prefix": "import * as App from 'url'",
		"body": [
			"import * as ${1:App} from '$0';"
		],
		"description": "import导入组件中的整个对象"
	},
	"注册组件": {
		"prefix": "Vue.component('${1:标签名}',${0:组件名})",
		"body": [
			"Vue.component('${1:标签名}',${0:组件名})"
		],
		"description": "注册组件"
	},
	"重定向": {
		"prefix": "redirect: '/b'",
		"body": [
			"redirect: '/${0:b}'"
		],
		"description": "重定向"
	},
	"element-ui": {
		"prefix": "element-ui",
		"body": [
			"import ElementUI from 'element-ui'",
			"import 'element-ui/lib/theme-chalk/index.css'",
			"Vue.use(ElementUI)",
		],
		"description": "element-ui"
	},
	"默认暴露": {
		"prefix": "export default",
		"body": [
			"export default $0",
		],
		"description": "默认暴露"
	},
	"成功": {
		"prefix": "success",
		"body": [
			"success",
		],
		"description": "成功"
	},
	"警告": {
		"prefix": "warning",
		"body": [
			"warning",
		],
		"description": "警告"
	},
	"错误": {
		"prefix": "error",
		"body": [
			"error",
		],
		"description": "错误"
	},
	"危险": {
		"prefix": "danger",
		"body": [
			"danger",
		],
		"description": "危险"
	},
	"信息": {
		"prefix": "info",
		"body": [
			"info",
		],
		"description": "信息"
	},
	"主要": {
		"prefix": "primary",
		"body": [
			"primary",
		],
		"description": "主要"
	},
	"消息": {
		"prefix": "message",
		"body": [
			"message",
		],
		"description": "消息"
	},
	"全局前置导航守卫": {
		"prefix": "router.beforeEach",
		"body": [
			"router.beforeEach((to, from, next) => {$0})",
		],
		"description": "全局前置导航守卫"
	},
	"全局后置导航守卫": {
		"prefix": "router.afterEach",
		"body": [
			"router.afterEach((to, from) => {$0})",
		],
		"description": "全局后置导航守卫"
	},
	"子组件接收父组件传递的值": {
		"prefix": "props:[]",
		"body": [
			"props:['${1:value}'],",
			"model:{",
			"\tprop:'${1:value}',",
			"\tevent:'${0:input}'",
			"},",
		],
		"description": "子组件接收父组件传递的值"
	},
	"子组件声明自定义事件,给父组件传值(事件名需要全部小写)": {
		"prefix": "this.$emit('click','val')",
		"body": [
			"this.$$emit('update:$1',$2)",
		],
		"description": "子组件声明自定义事件,给父组件传值(事件名需要全部小写)"
	},
	"调用mutations方法给vuex仓库属性赋值": {
		"prefix": "this.$store.commit('fun',val)",
		"body": [
			"this.$$store.commit('$1',$2)",
		],
		"description": "调用mutations方法给vuex仓库属性赋值"
	},
	"actions异步调用mutations方法给vuex仓库属性赋值": {
		"prefix": "this.$store.dispatch('fun',val)",
		"body": [
			"this.$$store.dispatch('$1',$2)",
		],
		"description": "actions异步调用mutations方法给vuex仓库属性赋值"
	},
	"vuex仓库属性取值": {
		"prefix": "this.$store.state.val",
		"body": [
			"this.$$store.state.$1",
		],
		"description": "vuex仓库属性取值"
	},
	"把obj2的所有属性都赋值给obj1": {
		"prefix": "Object.assign(obj1,obj2)",
		"body": [
			"Object.assign($1,$0)",
		],
		"description": "把obj2的所有属性都赋值给obj1"
	},
	"调用封装的请求": {
		"prefix": "try",
		"body": [
			"try {",
			"\tlet res = await ${0:userLogin}({",
			"\t\tmobile: this.mobile,",
			"\t})",
			"\tconsole.log(res)",
			"} catch (err) {",
			"\tconsole.log(err)",
			"}",
		],
		"description": "调用封装的请求"
	},
	"同步修饰": {
		"prefix": "async",
		"body": [
			"async"
		],
		"description": "同步修饰"
	},
	"动态添加属性触发响应式": {
		"prefix": "this.$set",
		"body": [
			"this.$$set(this.obj,key,val)"
		],
		"description": "动态添加属性触发响应式"
	},
	"数组去重": {
		"prefix": "...new Set()",
		"body": [
			"...new Set($0)"
		],
		"description": "数组去重"
	},
	"把图片转成base64": {
		"prefix": "base64",
		"body": [
			"let reader = new FileReader()",
			"reader.readAsDataURL(imgFile)",
			"reader.addEventListener(\"load\", res => {})",
		],
		"description": "把图片转成base64"
	},
	// html标签
	// "<a></a>": {
	// 	"prefix": "<a>",
	// 	"body": [
	// 		"<a href='#'>$0</a>",
	// 	],
	// 	"description": "<a>"
	// },
	// "<tag></tag>": {
	// 	"prefix": "<tag>",
	// 	"body": [
	// 		"<${1:div}>$0</${1:div}>",
	// 	],
	// 	"description": "<tag>"
	// },
	// -----------------------------Reat--------------------------------
	"React组件": {
		"prefix": "React-component",
		"body": [
			"import React from 'react'",
			"import './index.scss'",
			"",
			"export default class ${1:componentName} extends React.Component{",
			"\tstate = {};",
			"\trender (){",
			"\t\treturn (<div className=\"$1\">$0</div>)",
			"\t}",
			"}",
		],
		"description": "React组件"
	},
	"useState": {
		"prefix": "useState",
		"body": [
			"const [${1:state}, set_${1:state}] = useState($0);"
		],
	},
	"useRef": {
		"prefix": "useRef",
		"body": [
			"const $0 = useRef();"
		],
	},
	"useMemo": {
		"prefix": "useMemo",
		"body": [
			"useMemo(() => {$0}, []);"
		],
	},
	"useEffect": {
		"prefix": "useEffect",
		"body": [
			"useEffect(() => {$0}, []);"
		],
	},
	"useCallback": {
		"prefix": "useCallback",
		"body": [
			"useCallback(() => {$0}, []);"
		],
	},
	"React创建bus": {
		"prefix": "React-bus",
		"body": [
			"import {EventEmitter} from 'events';",
			"export default new EventEmitter()",
		],
		"description": "React创建bus"
	},
	"React-ref": {
		"prefix": "ref",
		"body": [
			"ref={val => this.$0 = val}"
		],
		"description": "React-ref"
	},
	"bus上传值": {
		"prefix": "bus.emit",
		"body": [
			"bus.emit('{1:fun}',$0)",
		],
		"description": "bus上传值"
	},
	"bus获取值": {
		"prefix": "bus.on",
		"body": [
			"bus.on('${1:fun}',data => {$0})",
		],
		"description": "bus获取值"
	},
	"React实例DOM完成渲染时": {
		"prefix": "componentDidMount",
		"body": [
			"componentDidMount(){$0};",
		],
		"description": "React实例DOM完成渲染时"
	},
	"React实例将要销毁时": {
		"prefix": "componentWillUnmount",
		"body": [
			"componentWillUnmount(){$0};",
		],
		"description": "React实例将要销毁时"
	},
	"React修改当前实例的state值": {
		"prefix": "this.setState",
		"body": [
			"this.setState({$0})",
		],
		"description": "React修改当前实例的state值"
	},
	"div": {
		"prefix": "div",
		"body": [
			"<div className=\"$0\"></div>"
		],
		"description": "div"
	},
	// ---------------------------------React  Style
	"宽": {
		"prefix": "width",
		"body": [
			"width: $0",
		],
		"description": "宽"
	},
	"高": {
		"prefix": "height",
		"body": [
			"height: $0",
		],
		"description": "高"
	},
	"左偏移": {
		"prefix": "left",
		"body": [
			"left: $0",
		],
		"description": "左偏移"
	},
	"上偏移": {
		"prefix": "top",
		"body": [
			"top: $0",
		],
		"description": "上偏移"
	},
	"左浮动": {
		"prefix": "float",
		"body": [
			"float: '${2:left}'$0",
		],
		"description": "左浮动"
	},
	"背景": {
		"prefix": "background",
		"body": [
			"background: '$2'$0",
		],
		"description": "背景"
	},
	"外边距": {
		"prefix": "margin",
		"body": [
			"margin: $0",
		],
		"description": "外边距"
	},
	"内边距": {
		"prefix": "padding",
		"body": [
			"padding: $0",
		],
		"description": "内边距"
	},
	"行高": {
		"prefix": "lineHeight",
		"body": [
			"lineHeight : '$2'$0",
		],
		"description": "行高"
	},
	"中心": {
		"prefix": "center",
		"body": [
			"center",
		],
		"description": "中心"
	},
	"边框": {
		"prefix": "border",
		"body": [
			"border : '$1px solid $2'",
		],
		"description": "边框"
	},
	"定位": {
		"prefix": "position",
		"body": [
			"position : '${2:absolute}',$0",
		],
		"description": "定位"
	},
	"溢出": {
		"prefix": "overflow",
		"body": [
			"overflow : '${2:hidden}',$0",
		],
		"description": "溢出"
	},
	"文字水平对齐": {
		"prefix": "textAlign",
		"body": [
			"textAlign : '${2:center}',$0",
		],
		"description": "文字水平对齐"
	},
	"相对定位": {
		"prefix": "relative",
		"body": [
			"relative",
		],
		"description": "相对定位"
	},
	"绝对定位": {
		"prefix": "absolute",
		"body": [
			"absolute",
		],
		"description": "绝对定位"
	},
	"透明度": {
		"prefix": "opacity",
		"body": [
			"opacity : $0",
		],
		"description": "透明度"
	},
	"过渡": {
		"prefix": "transition",
		"body": [
			"transition : '${0:all 1s}'",
		],
		"description": "过渡"
	},
	"字体大小": {
		"prefix": "fontSize",
		"body": [
			"fontSize : $0",
		],
		"description": "字体大小"
	},
	"颜色": {
		"prefix": "color",
		"body": [
			"color : '$2'$0",
		],
		"description": "颜色"
	},
	"字体": {
		"prefix": "fontFamily",
		"body": [
			"fontFamily : '$2'$0",
		],
		"description": "字体"
	},
	"层级": {
		"prefix": "zIndex",
		"body": [
			"zIndex : $0",
		],
		"description": "层级"
	},
	// -----------------------------React 事件
	"鼠标移入": {
		"prefix": "onMouseenter",
		"body": [
			"onMouseenter={() => this.${0:fun}()}",
		],
		"description": "鼠标移入"
	},
	"鼠标移出": {
		"prefix": "onMouseleave",
		"body": [
			"onMouseleave={() => this.${0:fun}()}",
		],
		"description": "鼠标移出"
	},
	"值改变事件": {
		"prefix": "onChange",
		"body": [
			"onChange={() => this.${0:fun}()}",
		],
		"description": "值改变事件"
	},
	"鼠标移入(触发冒泡)": {
		"prefix": "onMouseover",
		"body": [
			"onMouseover={() => this.${0:fun}()}",
		],
		"description": "鼠标移入(触发冒泡)"
	},
	"鼠标移动": {
		"prefix": "onMousemove",
		"body": [
			"onMousemove={() => this.${0:fun}()}",
		],
		"description": "鼠标移动"
	},
	"jQ点击": {
		"prefix": "onClick",
		"body": [
			"onClick={() => this.${0:fun}()}",
		],
		"description": "jQ点击"
	},
	"jQ键盘按下": {
		"prefix": "onKeydown",
		"body": [
			"onKeydown={() => this.${0:fun}()}",
		],
		"description": "jQ键盘按下"
	},
	"jQ键盘弹起": {
		"prefix": "onKeyup",
		"body": [
			"onKeyup={() => this.${0:fun}()}",
		],
		"description": "jQ键盘弹起"
	},
	"鼠标按下": {
		"prefix": "onMousedown",
		"body": [
			"onMousedown={() => this.${0:fun}()}",
		],
		"description": "鼠标按下"
	},
	"鼠标弹起": {
		"prefix": "onMouseup",
		"body": [
			"onMouseup={() => this.${0:fun}()}",
		],
		"description": "鼠标弹起"
	},
	"失去焦点": {
		"prefix": "onBlur",
		"body": [
			"onBlur={() => this.${0:fun}()}",
		],
		"description": "失去焦点"
	},
	"成为焦点": {
		"prefix": "onFocus",
		"body": [
			"onFocus={() => this.${0:fun}()}",
		],
		"description": "成为焦点"
	},
}